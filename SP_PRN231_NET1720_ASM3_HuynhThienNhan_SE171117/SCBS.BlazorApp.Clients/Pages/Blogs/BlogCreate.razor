@page "/Blogs/BlogCreate"
@using SCBS.BlazorApp.Clients.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<style>
    .create-container {
        max-width: 800px;
        margin: 40px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .create-title {
        font-size: 2rem;
        color: #2c3e50;
        margin-bottom: 20px;
        border-bottom: 2px solid #3498db;
        padding-bottom: 10px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            font-size: 1.1rem;
            color: #34495e;
            margin-bottom: 5px;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 10px;
            font-size: 1rem;
            border: 1px solid #bdc3c7;
            border-radius: 5px;
            box-sizing: border-box;
        }

        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }

    .submit-button {
        padding: 10px 20px;
        background-color: #2ecc71;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .submit-button:hover {
            background-color: #27ae60;
        }

    .back-button {
        padding: 10px 20px;
        background-color: #3498db;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        display: inline-block;
        margin-right: 10px;
    }

        .back-button:hover {
            background-color: #2980b9;
        }

    .error-message {
        color: #e74c3c;
        font-size: 1rem;
        margin-top: 10px;
    }
</style>

<div class="create-container">
    <h3 class="create-title">Create New Blog</h3>

    <EditForm Model="@newBlog" OnValidSubmit="@HandleCreate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="newBlog.Title" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="newBlog.Description" />
        </div>

        <div class="form-group">
            <label for="status">Status</label>
            <InputSelect id="status" @bind-Value="newBlog.Status">
                <option value="">Select status...</option>
                <option value="Draft">Draft</option>
                <option value="Published">Published</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="imageUrl">Image URL (Optional)</label>
            <InputText id="imageUrl" @bind-Value="imageUrl" placeholder="Enter image URL" />
        </div>

        <button type="submit" class="submit-button">Create Blog</button>
        <a href="/Blogs/BlogList" class="back-button">Back to List</a>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error-message">@errorMessage</p>
        }
    </EditForm>
</div>

@code {
    private Blog newBlog = new Blog();
    private string imageUrl = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleCreate()
    {
        try
        {
            // Nếu có nhập URL hình ảnh, thêm vào BlogImages
            if (!string.IsNullOrEmpty(imageUrl))
            {
                newBlog.BlogImages = new List<BlogImage>
                {
                    new BlogImage
                    {
                        ImageUrl = imageUrl
                        
                    }
                };
            }

            // Gửi yêu cầu POST tới API
            var response = await HttpClient.PostAsJsonAsync("https://localhost:7115/api/blog/create", newBlog);

            if (response.IsSuccessStatusCode)
            {
                // Đọc kết quả trả về (int) từ API
                var result = await response.Content.ReadFromJsonAsync<int>();
                if (result > 0)
                {
                    NavigationManager.NavigateTo("/Blogs/BlogList");
                }
                else
                {
                    errorMessage = "Blog creation failed. No records affected.";
                }
            }
            else
            {
                errorMessage = $"Failed to create blog. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
